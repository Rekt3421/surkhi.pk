{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nexports.animals = [{\n  value: '',\n  label: 'Select an animal'\n}, {\n  value: 'TIGER',\n  label: 'Tiger'\n}, {\n  value: 'BEAR',\n  label: 'Bear'\n}];\nexports.genders = [{\n  value: '',\n  label: 'N/A'\n}, {\n  value: 'MALE',\n  label: 'Male'\n}, {\n  value: 'FEMALE',\n  label: 'Female'\n}];\nexports.roles = [{\n  value: 'ADMIN',\n  label: 'Admin'\n}, {\n  value: 'USER',\n  label: 'User'\n}]; // similar to Storybook \"action()\"\n\nfunction log(name) {\n  return function (val) {\n    console.log(name, val);\n  };\n}\n\nexports.log = log; // combine class names - cn(props.className, more.className ...)\n\nfunction cn() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  var classNameStr = '';\n\n  for (var i = 0; i < items.length; i += 1) {\n    classNameStr += items[i] ? ' ' + items[i] : '';\n  }\n\n  return classNameStr;\n}\n\nexports.cn = cn;\n\nfunction clone(obj) {\n  if (!obj) {\n    return null;\n  } // return JSON.parse(JSON.stringify(obj));\n\n\n  return __assign({}, obj);\n}\n\nexports.clone = clone; // for shorthand syntax, extract { label, placeholder, name } from children string\n// example: <Field>label | placeholder | name</Field>\n\nexports.getChildrenParts = function (props) {\n  var children = props.children;\n  var isJSXString = Array.isArray(props.children) && children.join('').indexOf('|') >= 0;\n\n  if (isJSXString) {\n    // children can be: {role.label} | roles (which is not a string => join it to have a string)\n    children = children.join('');\n  }\n\n  if (typeof props.children === 'string' && props.children.indexOf('|') >= 0 || isJSXString) {\n    var arr = children.split('|').map(function (item) {\n      return item.trim();\n    });\n    var label_1 = arr[0];\n    var fieldName = arr[arr.length - 1];\n    var placeholder_1 = arr.length === 3 ? arr[1] : '';\n    return {\n      label: label_1,\n      placeholder: placeholder_1,\n      fieldName: fieldName\n    };\n  }\n\n  var label = props.label,\n      placeholder = props.placeholder,\n      name = props.name;\n  return {\n    label: label,\n    placeholder: placeholder,\n    fieldName: name\n  };\n};\n\nexports.DisplayFormState = function (props) {\n  return React.createElement(\"div\", {\n    style: {\n      margin: '1rem 0'\n    }\n  }, React.createElement(\"h3\", {\n    style: {\n      fontFamily: 'monospace'\n    }\n  }), React.createElement(\"pre\", {\n    style: {\n      background: '#f6f8fa',\n      fontSize: '.65rem',\n      padding: '.5rem'\n    }\n  }, React.createElement(\"strong\", null, \"values\"), \" = \", JSON.stringify(props.values, null, 2)));\n}; // check if variable is an array of options (for select)\n\n\nexports.isOptionArray = function (v) {\n  if (Array.isArray(v)) {\n    for (var i = 0; i < v.length; i += 1) {\n      if (!v[i].hasOwnProperty('value')) {\n        return false; // all array items must have \"value\"\n      }\n    }\n\n    return true; // Note: empty array => also true\n  }\n\n  return false;\n}; // delete multiple properties from data\n\n\nfunction deleteProperties(data, properties) {\n  for (var i = 0; i < properties.length; i += 1) {\n    if (data.hasOwnProperty(properties[i])) {\n      delete data[properties[i]];\n    }\n  }\n}\n\nexports.deleteProperties = deleteProperties;\n\nfunction toPascalCase(s) {\n  if (!s) {\n    return '';\n  }\n\n  return s.replace(/\\w+/g, function (w) {\n    return w[0].toUpperCase() + w.slice(1).toLowerCase();\n  });\n}\n\nexports.toPascalCase = toPascalCase;\n\nfunction deepFind(obj, propPath, defaultVal) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return null;\n  }\n\n  var result = clone(obj);\n  var arr = typeof propPath === 'string' ? propPath.split('.') : [propPath];\n\n  for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n    var propName = arr_1[_i];\n\n    if (!result) {\n      return defaultVal;\n    }\n\n    if (!result.hasOwnProperty(propName)) {\n      return defaultVal;\n    }\n\n    result = result[propName];\n  }\n\n  return result;\n}\n\nexports.deepFind = deepFind;","map":null,"metadata":{},"sourceType":"script"}