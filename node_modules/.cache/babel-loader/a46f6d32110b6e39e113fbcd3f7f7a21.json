{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nvar ReactTags = require(\"react-tag-autocomplete\"); // DON'T add \"@types/\" => will break yarn build!\n\n\nfunction TagSelect(props) {\n  var formik = props.formik,\n      onChange = props.onChange,\n      fieldName = props.fieldName,\n      placeholder = props.placeholder;\n\n  var clonedProps = __assign({}, props);\n\n  var values = formik.values[fieldName] || [];\n  var _a = clonedProps.options,\n      options = _a === void 0 ? [] : _a;\n  delete clonedProps.className;\n  var tags = values.map(function (id) {\n    var selectedOption = options['find'](function (option) {\n      return option.value === id;\n    });\n\n    if (selectedOption) {\n      return {\n        id: selectedOption.value,\n        name: selectedOption.label\n      };\n    } else {\n      return {\n        id: id,\n        name: id\n      };\n    }\n  });\n  var suggestions = options.map(function (opt) {\n    return {\n      id: opt.value,\n      name: opt.label\n    };\n  });\n  return React.createElement(ReactTags, __assign({\n    addOnBlur: true,\n    allowNew: true,\n    allowBackspace: true,\n    autofocus: false,\n    minQueryLength: 0,\n    tags: tags,\n    placeholder: placeholder,\n    suggestions: suggestions,\n    handleValidate: function (_a) {\n      var name = _a.name;\n      return name.length;\n    },\n    handleAddition: function (_a) {\n      var name = _a.name;\n      var foundOpt = options['find'](function (option) {\n        return option.label === name;\n      });\n      var changedValue = foundOpt ? foundOpt.value : name;\n      values.push(changedValue);\n      formik.setFieldValue(fieldName, values);\n      onChange && onChange({\n        value: changedValue,\n        formik: formik\n      });\n    },\n    handleDelete: function (index) {\n      values.splice(index, 1);\n      formik.setFieldValue(fieldName, values);\n      onChange && onChange({\n        formik: formik,\n        index: index\n      });\n    }\n  }, clonedProps));\n}\n\nexports[\"default\"] = TagSelect;","map":null,"metadata":{},"sourceType":"script"}