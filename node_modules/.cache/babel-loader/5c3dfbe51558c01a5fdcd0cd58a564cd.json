{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nvar react_select_1 = require(\"react-select\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar SingleSelect =\n/** @class */\nfunction (_super) {\n  __extends(SingleSelect, _super);\n\n  function SingleSelect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SingleSelect.prototype.componentWillMount = function () {\n    this.triggerOnChange(this.props);\n  };\n\n  SingleSelect.prototype.componentWillReceiveProps = function (newProps) {\n    if (this.props.options !== newProps.options) {\n      // trigger onChange when \"options\" changed (after fetching & setting options)\n      this.triggerOnChange(newProps);\n    }\n  };\n\n  SingleSelect.prototype.triggerOnChange = function (newProps) {\n    if (!newProps.autoOnChange || newProps.autoOnChange === false) {\n      return; // for backward compatibility, this prop will not trigger onChange when options changed.\n    }\n\n    var fieldName = newProps.name;\n    var val = Utils_1.deepFind(newProps.formik.values, fieldName); // from the value => look up to find changedItem { label, value } to trigger onChange\n\n    if (newProps.options && Array.isArray(newProps.options)) {\n      var changedItem = newProps.options.find(function (opt) {\n        return opt.value === val;\n      });\n\n      if (changedItem && newProps.onChange) {\n        newProps.onChange({\n          item: changedItem,\n          formik: newProps.formik\n        });\n      }\n    }\n  };\n\n  SingleSelect.prototype.render = function () {\n    var _this = this;\n\n    var fieldName = this.props.name;\n    var options = this.props.options || [];\n    var values = this.props.formik.values;\n    var disabled = this.props.disabled; // required for testing to identify the field\n    // const classFieldName = `__${this.props.name.split('.').join('-')}`\n\n    var placeholder = options && options[0] && options[0].label === 'Loading...' ? 'Loading...' : this.props.placeholder || 'Select';\n\n    if (!options || options.length === 0) {\n      placeholder = '';\n    }\n\n    var val = Utils_1.deepFind(values, fieldName);\n    var selectedOpt = options['find'](function (opt) {\n      return opt.value === val;\n    }); // className={`${css.main} ${classFieldName}`}\n\n    return React.createElement(react_select_1[\"default\"], {\n      className: this.props.className,\n      isClearable: true,\n      value: selectedOpt,\n      placeholder: placeholder,\n      options: options,\n      disabled: disabled,\n      searchable: options && options.length > 5 ? true : false,\n      onChange: function (item) {\n        _this.props.formik.setFieldValue(fieldName, item ? item.value : '');\n\n        _this.props.onChange && _this.props.onChange({\n          item: item,\n          formik: _this.props.formik\n        });\n      }\n    });\n  };\n\n  return SingleSelect;\n}(React.Component);\n\nexports[\"default\"] = SingleSelect;","map":null,"metadata":{},"sourceType":"script"}