{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\100DaysCodeProjects\\\\surkhi\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\100DaysCodeProjects\\\\surkhi\\\\src\\\\components\\\\Posts.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n    posts {\\n        key\\n        title\\n        summary\\n        verdict\\n        category\\n        image\\n    }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Post from './Post';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nconst GET_POSTS = gql(_templateObject());\n\nclass Posts extends Component {\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(Query, {\n      query: GET_POSTS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return \"Loading...\";\n      if (error) return \"Error! \".concat(error.message);\n      let postArray = data['posts'].reverse();\n      return this.postArray.map((post, index) => {\n        return React.createElement(Post, {\n          click: () => this.props.clicked(index),\n          headline: post.headline,\n          description: post.description,\n          post_image: '../server/server-images/' + post.image,\n          key: post.key,\n          verdict: '../assets/images/surkhi-meter-images/' + post.verdict,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n      });\n    }));\n  }\n\n}\n\nexport default Posts;","map":{"version":3,"sources":["C:\\100DaysCodeProjects\\surkhi\\src\\components\\Posts.js"],"names":["React","Component","Post","Query","gql","GET_POSTS","Posts","render","loading","error","data","message","postArray","reverse","map","post","index","props","clicked","headline","description","image","key","verdict"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAAQC,KAAR,QAAoB,cAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,SAAS,GAAGD,GAAH,mBAAf;;AAaA,MAAME,KAAN,SAAoBL,SAApB,CAA8B;AAC1BM,EAAAA,MAAM,GAAE;AACJ,WACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEF,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC;AAACG,MAAAA,OAAD;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,KAAD,KAA2B;AACxB,UAAIF,OAAJ,EAAa,OAAO,YAAP;AACb,UAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB;AAEX,UAAIC,SAAS,GAAGF,IAAI,CAAC,OAAD,CAAJ,CAAcG,OAAd,EAAhB;AACA,aAAO,KAAKD,SAAL,CAAeE,GAAf,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvC,eACA,oBAAC,IAAD;AACI,UAAA,KAAK,EAAE,MAAM,KAAKC,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,CADjB;AAEI,UAAA,QAAQ,EAAID,IAAI,CAACI,QAFrB;AAGI,UAAA,WAAW,EAAEJ,IAAI,CAACK,WAHtB;AAII,UAAA,UAAU,EAAI,6BAA6BL,IAAI,CAACM,KAJpD;AAKI,UAAA,GAAG,EAAIN,IAAI,CAACO,GALhB;AAMI,UAAA,OAAO,EAAI,0CAA0CP,IAAI,CAACQ,OAN9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AASH,OAVM,CAAP;AAWH,KAjBL,CADJ,CADA;AAwBH;;AA1ByB;;AA8B9B,eAAejB,KAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport Post from './Post';\r\n\r\nimport {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst GET_POSTS = gql`\r\n{\r\n    posts {\r\n        key\r\n        title\r\n        summary\r\n        verdict\r\n        category\r\n        image\r\n    }\r\n}\r\n`;\r\n\r\nclass Posts extends Component {\r\n    render(){\r\n        return(\r\n        <React.Fragment>\r\n            <Query query={GET_POSTS}>\r\n                {({loading, error, data}) =>{\r\n                    if (loading) return \"Loading...\";\r\n                    if (error) return `Error! ${error.message}`;\r\n                \r\n                    let postArray = data['posts'].reverse()\r\n                    return this.postArray.map((post, index) => {\r\n                        return (\r\n                        <Post \r\n                            click={() => this.props.clicked(index)}\r\n                            headline = {post.headline}\r\n                            description={post.description} \r\n                            post_image = {'../server/server-images/' + post.image}\r\n                            key = {post.key}\r\n                            verdict = {'../assets/images/surkhi-meter-images/' + post.verdict} />\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n            </Query>\r\n        </React.Fragment>\r\n        );\r\n    } \r\n\r\n}\r\n\r\nexport default Posts;"]},"metadata":{},"sourceType":"module"}