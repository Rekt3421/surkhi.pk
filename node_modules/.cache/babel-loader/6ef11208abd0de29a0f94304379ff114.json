{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nvar formik_1 = require(\"formik\");\n\nvar react_toggle_1 = require(\"react-toggle\");\n\nvar Utils_1 = require(\"./Utils\"); // import SingleSelect from './custom/SingleSelect'; // requires 'react-select' => increase bundle size\n// import MultiSelect from './custom/MultiSelect'; // requires 'react-select' => increase bundle size\n// import TagSelect from './custom/TagSelect';\n\n\nvar getClasses = function (use, isHorizontal) {\n  var defaults = {\n    group: '',\n    label: 'ui-label',\n    control: 'ui-field',\n    row: 'ui-row',\n    file: 'ui-field',\n    toggle: 'ui-toggle',\n    invalidControl: 'ui-field-error',\n    error: 'ui-error',\n    help: 'ui-help'\n  };\n\n  if (use === 'bootstrap3' || use === 'bootstrap4') {\n    defaults.group = 'form-group' + (isHorizontal ? ' row' : '') + '';\n    defaults.control = 'form-control';\n    defaults.row = 'form-row';\n    defaults.file = 'ui-field ui-bootstrap-file';\n    defaults.toggle = 'ui-bootstrap-toggle'; // custom css for bootstrap\n\n    defaults.invalidControl = 'is-invalid';\n    defaults.error = 'invalid-feedback';\n    defaults.help = 'form-text text-muted';\n  }\n\n  if (use === 'spectre') {\n    defaults.group = 'form-group';\n    defaults.label = 'form-label form-inline';\n    defaults.control = 'form-input';\n    defaults.row = 'input-group'; // defaults.toggle = 'ui-spectre-toggle'; // no need yet\n\n    defaults.invalidControl = 'is-error';\n    defaults.error = 'form-input-hint';\n  }\n\n  if (use === 'semanticui2') {\n    defaults.group = isHorizontal ? 'field inline' : 'field';\n    defaults.row = 'equal width fields';\n    defaults.file = 'ui-field ui-semanticui2-file';\n    defaults.toggle = 'ui-semanticui2-toggle';\n  }\n\n  return defaults;\n};\n\nfunction Checkbox(props) {\n  return React.createElement(formik_1.Field, {\n    name: props.name\n  }, function (_a) {\n    var field = _a.field,\n        form = _a.form;\n    return React.createElement(\"label\", null, React.createElement(\"input\", __assign({\n      type: \"checkbox\"\n    }, props, {\n      checked: field.value && field.value.includes(props.value),\n      onChange: function () {\n        var nextValue;\n        field.value = field.value || [];\n\n        if (field.value.includes(props.value)) {\n          nextValue = field.value.filter(function (value) {\n            return value !== props.value;\n          });\n          form.setFieldValue(props.name, nextValue);\n        } else {\n          nextValue = field.value.concat(props.value);\n          form.setFieldValue(props.name, nextValue);\n        }\n\n        props.onChange && props.onChange({\n          value: nextValue,\n          formik: form\n        });\n      }\n    })), \"\\u00A0\", props.label);\n  });\n}\n\nfunction Radio(props) {\n  return React.createElement(formik_1.Field, {\n    name: props.name\n  }, function (_a) {\n    var field = _a.field,\n        form = _a.form;\n    return React.createElement(\"label\", null, React.createElement(\"input\", __assign({\n      type: \"radio\"\n    }, props, {\n      checked: field.value === props.value,\n      onChange: function () {\n        form.setFieldValue(props.name, props.value);\n        props.onChange && props.onChange({\n          value: props.value,\n          formik: form\n        });\n      }\n    })), \"\\u00A0\", props.label);\n  });\n}\n\nfunction UIToggle(props) {\n  return React.createElement(formik_1.Field, {\n    name: props.name\n  }, function (_a) {\n    var field = _a.field,\n        form = _a.form;\n    var formVal = form.values[props.name]; // field value form formik.values\n\n    var checked = typeof formVal !== 'undefined' ? formVal : false;\n    return React.createElement(react_toggle_1[\"default\"], __assign({\n      icons: false\n    }, props, {\n      checked: checked,\n      onChange: function (e) {\n        form.setFieldValue(props.name, e.target.checked);\n        props.onChange && props.onChange({\n          value: e.target.checked,\n          event: e,\n          formik: form\n        });\n      }\n    }));\n  });\n}\n\nvar Thumb =\n/** @class */\nfunction (_super) {\n  __extends(Thumb, _super);\n\n  function Thumb() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      loading: false,\n      thumb: undefined\n    };\n    return _this;\n  }\n\n  Thumb.prototype.componentWillReceiveProps = function (nextProps) {\n    var _this = this;\n\n    if (!nextProps.file) {\n      return;\n    }\n\n    this.setState({\n      loading: true\n    }, function () {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        _this.setState({\n          loading: false,\n          thumb: reader.result\n        });\n      };\n\n      reader.readAsDataURL(nextProps.file);\n    });\n  };\n\n  Thumb.prototype.render = function () {\n    var file = this.props.file;\n    var _a = this.state,\n        loading = _a.loading,\n        thumb = _a.thumb;\n\n    if (!file) {\n      return null;\n    } // if (loading) { return <p>loading...</p>; } // this causes flickering when changing other fields.\n\n\n    return React.createElement(\"img\", {\n      src: thumb,\n      alt: file.name,\n      className: \"ui-thumb\"\n    });\n  };\n\n  return Thumb;\n}(React.Component);\n\nfunction FileUpload(props) {\n  return React.createElement(formik_1.Field, {\n    name: props.name\n  }, function (_a) {\n    var field = _a.field,\n        form = _a.form;\n    return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n      id: props.id || props.name,\n      name: props.name,\n      type: \"file\",\n      className: props.className || '',\n      onChange: function (event) {\n        form.setFieldValue(props.name, event.currentTarget.files[0]);\n        props.onChange && props.onChange({\n          value: event.currentTarget.files[0],\n          event: event,\n          formik: form\n        });\n      }\n    }), props.withPreview && React.createElement(Thumb, {\n      file: form.values[props.name]\n    }));\n  });\n}\n\nfunction Row(props) {\n  function renderChildren() {\n    return React.Children.map(props.children, function (child, index) {\n      return React.cloneElement(child, {\n        key: index,\n        className: 'col-md-6'\n      });\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: props.className\n  }, renderChildren());\n}\n\nvar UIField = function (props) {\n  var _a = Utils_1.getChildrenParts(props),\n      label = _a.label,\n      placeholder = _a.placeholder,\n      fieldName = _a.fieldName;\n\n  var labelText = label || Utils_1.toPascalCase(fieldName);\n  var errors = props.formik.errors;\n  var touched = Utils_1.deepFind(props.formik.touched, fieldName);\n  var isTouched = Array.isArray(touched) ? false : touched;\n  var hasErrors = Utils_1.deepFind(props.formik.errors, fieldName) && (isTouched || props.formik.submitCount > 0);\n  var classes = getClasses(props.formik.ezUse, props.formik.ezHorizontal);\n  var css = props.formik.ezCss || {};\n  var labelCss = css.label || props.labelCss || '';\n  var labelClass = labelCss ? classes.label + \" \" + labelCss : classes.label;\n  var controlCss = css.control || props.controlCss || '';\n  var controlClass = Utils_1.cn(classes.control, controlCss);\n  var toggleCss = css.toggle || props.toggleCss || '';\n  var toggleClass = Utils_1.cn(classes.toggle, toggleCss);\n  var fileCss = css.file || props.fileCss || '';\n  var fileClass = Utils_1.cn(classes.file, fileCss);\n  var rowCss = css.row || props.rowCss || '';\n  var rowClass = Utils_1.cn(classes.row, rowCss);\n  var errorCss = css.error || props.errorCss || '';\n  var errorClass = Utils_1.cn(classes.error, errorCss);\n  var helpCss = css.help || props.helpCss || '';\n  var helpClass = Utils_1.cn(classes.help, helpCss);\n  var options = null;\n\n  if (Utils_1.isOptionArray(props.options)) {\n    options = props.options.map(function (opt) {\n      return React.createElement(\"option\", {\n        key: opt.value,\n        value: opt.value\n      }, opt.label);\n    });\n  }\n\n  var Label = function (compProps) {\n    if (props.label === '') {\n      return React.createElement(\"label\", {\n        htmlFor: compProps[\"for\"] || fieldName,\n        className: labelClass\n      });\n    }\n\n    if (props.label === null) {\n      return null;\n    }\n\n    return React.createElement(\"label\", {\n      htmlFor: compProps[\"for\"] || fieldName,\n      className: labelClass\n    }, labelText);\n  };\n\n  var ErrorMessage = function () {\n    return hasErrors ? React.createElement(\"span\", {\n      className: errorClass\n    }, Utils_1.deepFind(errors, fieldName)) : null;\n  };\n\n  var clonedProps = __assign({}, props // className: '' // don't pass props.className to children\n  );\n\n  var commonProps = {\n    label: labelText,\n    name: fieldName,\n    value: props.value,\n    onChange: props.onChange\n  };\n  var moreProps = {};\n\n  if (props.textarea) {\n    moreProps.component = 'textarea';\n  }\n\n  var mainClassName = classes.group + Utils_1.cn(props.className);\n\n  if (props.select) {\n    // --- native select: (we need customization & search => use SearchableSelect)\n    moreProps.key = \"fieldkey_\" + +new Date();\n    moreProps.component = 'select';\n  }\n\n  ['number', 'password', 'date', 'time', 'range'].map(function (type) {\n    if (props.hasOwnProperty(type)) {\n      moreProps.type = type; // HTML5 input types\n    }\n  });\n\n  if (props.custom) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Label, null), React.createElement(props.custom, __assign({}, props, {\n      fieldName: fieldName,\n      className: \"\" + (hasErrors ? classes.invalidControl : '')\n    })), React.createElement(\"small\", {\n      className: helpClass\n    }, props.help), React.createElement(ErrorMessage, null));\n  }\n  /*\n  // --- singleSelect & multiSelect increase bundle size => let user import them when needed.\n  if (props.singleSelect) {\n    return (\n      <div className={mainClassName}>\n        <Label/>\n        <SingleSelect {...props} className={`${hasErrors ? classes.invalidControl : ''}`} />\n        <small className={helpClass}>{props.help}</small>\n        <ErrorMessage/>\n      </div>\n    )\n  }\n     if (props.multiSelect) {\n    return (\n      <div className={mainClassName}>\n        <Label/>\n        <MultiSelect {...props} className={`${hasErrors ? classes.invalidControl : ''}`} />\n        <small className={helpClass}>{props.help}</small>\n        <ErrorMessage/>\n      </div>\n    )\n  } */\n  // ------ render <Field row .../>\n\n\n  if (props.row) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Row, __assign({}, commonProps, {\n      className: rowClass\n    }), props.children));\n  } // ------ render <Field toggle .../>\n\n\n  if (props.toggle) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Label, null), React.createElement(UIToggle, __assign({}, commonProps, {\n      className: props.inline ? toggleClass + \"-inline\" : toggleClass\n    })), React.createElement(ErrorMessage, null));\n  } // ------ render <Field file .../>\n\n\n  if (props.file) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Label, null), React.createElement(FileUpload, __assign({}, commonProps, {\n      withPreview: props.withPreview,\n      className: fileClass + \" \" + (hasErrors ? classes.invalidControl : '')\n    })), React.createElement(ErrorMessage, null));\n  } // ------ render <Field checkbox .../> - form value has Boolean Type (true/false)\n\n\n  if (props.checkbox && typeof props.value === 'undefined') {\n    var randomId = \"id_\" + Math.random().toString().slice(2);\n    var val = props.formik.values[fieldName];\n    var disabled = props.disabled;\n    return React.createElement(\"div\", {\n      className: mainClassName + \" \" + (disabled ? 'ui-field-disabled' : '')\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: randomId,\n      disabled: disabled,\n      name: fieldName,\n      checked: !!val,\n      onChange: function (ev) {\n        var val = ev.target.checked;\n        props.formik.setFieldValue(fieldName, val);\n        props.onChange && props.onChange({\n          value: val,\n          event: ev,\n          formik: props.formik\n        });\n      }\n    }), \"\\u00A0\", React.createElement(Label, {\n      \"for\": randomId\n    }), React.createElement(\"small\", {\n      className: helpClass\n    }, props.help), React.createElement(ErrorMessage, null));\n  } // ------ render <Field checkbox value .../> - checkbox has value prop => form value has Array Type\n\n\n  if (props.checkbox && typeof props.value !== 'undefined') {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Checkbox, __assign({}, commonProps)));\n  } // ------ render <Field checkboxes options={} .../>\n\n\n  if (props.checkboxes && props.options) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Label, null), React.createElement(\"div\", {\n      className: \"ui-field-full \" + (hasErrors ? classes.invalidControl : '')\n    }, props.options.map(function (opt) {\n      return React.createElement(Checkbox, {\n        key: opt.value,\n        label: opt.label,\n        name: fieldName,\n        value: opt.value,\n        onChange: props.onChange\n      });\n    })), React.createElement(ErrorMessage, null));\n  } // ------ radio <Field radio .../>\n\n\n  if (props.radio) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Radio, __assign({}, commonProps)));\n  } // ------ radios <Field radios options={} .../>\n\n\n  if (props.radios && props.options) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Label, null), React.createElement(\"div\", {\n      className: \"ui-field-full \" + (hasErrors ? classes.invalidControl : '')\n    }, props.options.map(function (opt) {\n      return React.createElement(Radio, {\n        key: opt.value,\n        label: opt.label,\n        name: fieldName,\n        value: opt.value,\n        onChange: props.onChange\n      });\n    })), React.createElement(ErrorMessage, null));\n  } // ------ render custom field <Field renderField={(props) => <ReactSelect ... />}   </Field>\n\n\n  if (props.renderField) {\n    return React.createElement(\"div\", {\n      className: mainClassName\n    }, React.createElement(Label, null), props.renderField(props), React.createElement(\"small\", {\n      className: helpClass\n    }, props.help), React.createElement(ErrorMessage, null));\n  } // ------ render multi select <Field multiSelect options={} .../>\n  // if (props.multiSelect) {\n  //   return (\n  //     <div className={mainClassName}>\n  //       <Label/>\n  //       <MultiSelect {...props} />\n  //       <small className={helpClass}>{props.help}</small>\n  //       <ErrorMessage/>\n  //     </div>\n  //   )\n  // }\n  // ------ regular field\n\n\n  delete clonedProps.onChange; // otherwise it will override the FastField onChange handler below.\n  // delete to avoid react warning (it requires passing select=\"true\", not shorthands like select, etc.)\n\n  Utils_1.deleteProperties(clonedProps, ['select', 'number', 'password', 'date', 'time', 'range', 'textarea']);\n  return React.createElement(\"div\", {\n    className: mainClassName\n  }, React.createElement(Label, null), React.createElement(formik_1.FastField, __assign({\n    name: fieldName,\n    placeholder: placeholder,\n    onChange: function (ev) {\n      props.formik.handleChange(ev);\n\n      if (Utils_1.deepFind(ev, 'nativeEvent.target.tagName') === 'INPUT') {\n        props.onChange && props.onChange({\n          value: Utils_1.deepFind(ev, 'nativeEvent.target.value'),\n          event: ev,\n          formik: props.formik\n        }); // input's value\n      } else {\n        props.onChange && props.onChange({\n          event: ev,\n          formik: props.formik\n        }); // generic event\n      }\n    },\n    validate: props.validate\n  }, clonedProps, moreProps, {\n    className: controlClass + \" \" + (hasErrors ? classes.invalidControl : '')\n  }), options), React.createElement(\"small\", {\n    className: helpClass\n  }, props.help), React.createElement(ErrorMessage, null));\n};\n\nexports[\"default\"] = formik_1.connect(UIField);","map":null,"metadata":{},"sourceType":"script"}