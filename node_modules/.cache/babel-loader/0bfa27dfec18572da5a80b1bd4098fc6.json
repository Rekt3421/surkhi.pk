{"ast":null,"code":"import _objectSpread from \"C:\\\\100DaysCodeProjects\\\\surkhi\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"C:\\\\100DaysCodeProjects\\\\surkhi\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\100DaysCodeProjects\\\\surkhi\\\\src\\\\components\\\\PostCreator.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    mutation AddPost($title: String!, $category: [String!]!, $summary: String!, $image: Upload!, $verdict: String!){\\n        addPost(postTitle: $title, category: $category, postSummary: $summary, image: $image, verdict: $verdict){\\n            postTitle\\n            category\\n            postSummary\\n            image\\n            verdict\\n}\\n    }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Aux from '../hoc/Auxiliary';\nimport TagsInput from 'react-tagsinput';\nimport ReactTags from 'react-tag-autocomplete';\nimport '../assets/stylesheets/post.scss';\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nconst ADD_POST = gql(_templateObject());\n\nclass PostCreator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTagChange = tags => {\n      this.setState({\n        tags\n      });\n    };\n\n    this.handleChangeInput = tag => {\n      this.setState({\n        tag\n      });\n    };\n\n    this.resetHandler = ({\n      fields,\n      form\n    }) => {\n      this.setState({\n        password: ''\n      }); // manually reset controlled fields (\"password\")\n    };\n\n    this.state = {\n      tags: ['Pakistan'],\n      chips: []\n    };\n  }\n\n  handleListTagClick(tag) {\n    this.setState({\n      tags: [...this.state.tags, tag]\n    }); // keep existing tag and add one to it\n  }\n\n  notDuplicate(tags, newTag) {\n    return !tags.includes(newTag) || this.props.allowDuplicates;\n  }\n\n  addTag(tag) {\n    if (this.notDuplicate(this.state.tags, tag)) {\n      this.setState({\n        tags: [...this.state.tags, tag],\n        inputValue: ''\n      }, () => {\n        this.handleNewTag(this.state.tags);\n      });\n    }\n  }\n\n  handleTagDelete(index, e) {\n    this.deleteTag(index, () => {\n      this.props.onTagChange(this.state.tags);\n    });\n  }\n\n  deleteTag(index, callback) {\n    let tags = this.state.tags.slice();\n    tags.splice(index, 1);\n    this.setState({\n      tags\n    }, () => {\n      if (callback) callback();\n    });\n  }\n\n  render() {\n    let titleInput;\n    let categoryInput;\n    let summaryInput;\n    let imageInput;\n    let verdictInput;\n    let imageUrl = '';\n\n    let urlChange = e => {\n      imageUrl = e.target.value;\n    };\n\n    const styles = {\n      chipsContainer: {\n        width: '100%',\n        ':focus': {\n          color: '#495057',\n          backgroundColor: '#fff',\n          borderColor: '#80bdff',\n          outline: '0',\n          boxShadow: '0 0 0 0.2rem rgba(0, 123, 255, 0.25)'\n        }\n      }\n    };\n    return React.createElement(Mutation, {\n      mutation: ADD_POST,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, addPost => React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container postcreator-widget\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel panel-default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"panel-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"panel-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Post Creator Panel\")), React.createElement(\"div\", {\n      className: \"panel-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"instructions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"For editorial purposes only: Please write the \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"name\"), \" and \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"summary\"), \" of the article, then choose an appropriate \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"image\"), \" to display. Write the \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"category\"), \" of the article that it belongs to (You may choose multiple). Lastly, select the \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Surkhi Rating\"), \" before pressing the \\\"Submit\\\" button. You may choose to start over by pressing \\\"Reset\\\".\")), React.createElement(\"form\", {\n      id: \"post-form\",\n      onSubmit: e => {\n        e.preventDefault();\n        addPost({\n          variables: {\n            postTitle: titleInput.value,\n            category: categoryInput.value,\n            postSummary: summaryInput.value,\n            image: imageInput,\n            verdict: verdictInput.value\n          }\n        });\n        titleInput.value = \"\";\n        categoryInput.value = \"\";\n        summaryInput.value = \"\";\n        verdictInput.value = \"\";\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"control-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Post Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"Enter first name\",\n      name: \"postTitle\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"control-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Select Post Category\"), React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"input-group-text\",\n      for: \"inputGroupSelect01\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Category\"), React.createElement(TagInput, {\n      onTagChange: this.handleTagChange,\n      tags: this.state.tags,\n      name: \"postCategories\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"control-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Post Summary\"), React.createElement(\"input\", {\n      type: \"textarea\",\n      className: \"form-control\",\n      placeholder: \"Enter Summary...\",\n      name: \"postSummary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"control-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Post Image\"), React.createElement(\"div\", {\n      class: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"input-group-prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"btn btn-default btn-file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Browse\\u2026 \", React.createElement(\"input\", {\n      type: \"file\",\n      id: \"imgInp\",\n      onChange: urlChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))), React.createElement(\"input\", {\n      type: \"text\",\n      class: \"form-control\",\n      value: true,\n      readOnly: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"col-sm-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"control-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Select Verdict\"), React.createElement(\"div\", {\n      className: \"input-group mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group-prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"input-group-text\",\n      for: \"inputGroupSelect01\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Verdict\")), React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"inputGroupSelect01\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Choose...\"), React.createElement(\"option\", {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Khara Such\"), React.createElement(\"option\", {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Such\"), React.createElement(\"option\", {\n      value: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Mumkin\"), React.createElement(\"option\", {\n      value: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Jhoot\"), React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Jhootay Ka Muun Kala\"))))))), React.createElement(\"div\", {\n      className: \"panel-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"pull-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger reset\",\n      onReset: this.resetHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success submit\",\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Submit\")))))))), \";\");\n  }\n\n}\n\nclass TagInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNewTag = tags => {\n      if (this.props.onNewTag) this.props.onNewTag(tags);\n      if (this.props.onTagChange) this.props.onTagChange(tags);\n    };\n\n    this.handleInputChange = ({\n      target: {\n        value: inputValue\n      }\n    }) => {\n      inputValue = inputValue == ',' ? '' : inputValue;\n      this.setState({\n        inputValue\n      });\n    };\n\n    this.handleKeyDown = e => {\n      let key = e.key,\n          value = e.target.value;\n      let tags = this.state.tags;\n\n      switch (key) {\n        case 'Tab':\n          if (value) e.preventDefault();\n\n        case 'Enter':\n        case ',':\n          value = value.trim();\n\n          if (value && this.notDuplicate(tags, value)) {\n            this.addTag(value);\n          } else {\n            this.setState({\n              inputValue: ''\n            });\n          }\n\n          break;\n\n        case 'Backspace':\n          if (!value) {\n            this.handleTagDelete(tags.length - 1);\n          }\n\n          break;\n\n        default:\n      }\n    };\n\n    this.handleTagDelete = (index, e) => {\n      this.deleteTag(index, () => {\n        this.props.onTagChange(this.state.tags);\n      });\n    };\n\n    this.deleteTag = (index, callback) => {\n      let tags = this.state.tags.slice();\n      tags.splice(index, 1);\n      this.setState({\n        tags\n      }, () => {\n        if (callback) callback();\n      });\n    };\n\n    this.notDuplicate = (tags, newTag) => {\n      return !tags.includes(newTag) || this.props.allowDuplicates;\n    };\n\n    this.addTag = tag => {\n      if (this.notDuplicate(this.state.tags, tag)) {\n        this.setState({\n          tags: [...this.state.tags, tag],\n          inputValue: ''\n        }, () => {\n          this.handleNewTag(this.state.tags);\n        });\n      }\n    };\n\n    this.updateControlledTags = tags => {\n      if (tags && !Helpers.hasDuplicates(tags)) {\n        this.setState({\n          tags\n        }, () => {// this.props.onTagChange(tags);\n        });\n      }\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      this.updateControlledTags(nextProps.tags);\n    };\n\n    this.state = {\n      inputValue: '',\n      tags: this.props.tags || []\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      className: \"tagInputWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(TagsList, {\n      tags: this.state.tags,\n      onTagDelete: this.handleTagDelete,\n      hashtag: this.props.hashtag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"tagInput\",\n      className: \"tagInput\",\n      placeholder: \"enter a tag...\",\n      value: this.state.inputValue,\n      onChange: this.handleInputChange,\n      onKeyDown: this.handleKeyDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Helpers {\n  static contains(orig, filter) {\n    let res = filter.map(item => {\n      return orig.includes(item);\n    });\n    return !res.includes(false);\n  }\n\n  static hasDuplicates(array) {\n    return new Set(array).size !== array.length;\n  }\n\n}\n\nconst TagsList = ({\n  tags,\n  onTagDelete,\n  hashtag\n}) => {\n  let list = tags.map((tag, index) => React.createElement(Tag, {\n    name: tag,\n    onDelete: onTagDelete,\n    index: index,\n    hashtag: hashtag,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }));\n  return React.createElement(\"ul\", {\n    name: \"tagsList\",\n    className: \"tagsList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, list);\n};\n\nconst Tag = ({\n  name,\n  index,\n  onDelete,\n  hashtag,\n  hashtagStyle\n}) => {\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }, hashtag && React.createElement(\"span\", {\n    style: _objectSpread({\n      color: '#898989',\n      fontWeight: 'bold'\n    }, hashtagStyle),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, \"# \"), name, React.createElement(\"a\", {\n    href: \"#\",\n    onClick: e => onDelete(index, e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, \"x\"));\n};\n\nexport default PostCreator;","map":{"version":3,"sources":["C:\\100DaysCodeProjects\\surkhi\\src\\components\\PostCreator.js"],"names":["React","Component","Aux","TagsInput","ReactTags","Query","Mutation","gql","ADD_POST","PostCreator","constructor","props","handleTagChange","tags","setState","handleChangeInput","tag","resetHandler","fields","form","password","state","chips","handleListTagClick","notDuplicate","newTag","includes","allowDuplicates","addTag","inputValue","handleNewTag","handleTagDelete","index","e","deleteTag","onTagChange","callback","slice","splice","render","titleInput","categoryInput","summaryInput","imageInput","verdictInput","imageUrl","urlChange","target","value","styles","chipsContainer","width","color","backgroundColor","borderColor","outline","boxShadow","addPost","preventDefault","variables","postTitle","category","postSummary","image","verdict","submitHandler","TagInput","onNewTag","handleInputChange","handleKeyDown","key","trim","length","updateControlledTags","Helpers","hasDuplicates","componentWillReceiveProps","nextProps","hashtag","contains","orig","filter","res","map","item","array","Set","size","TagsList","onTagDelete","list","Tag","name","onDelete","hashtagStyle","fontWeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Aux from '../hoc/Auxiliary';\r\nimport TagsInput from 'react-tagsinput'\r\nimport ReactTags from 'react-tag-autocomplete';\r\nimport '../assets/stylesheets/post.scss';\r\n\r\nimport {Query, Mutation} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst ADD_POST = gql`\r\n    mutation AddPost($title: String!, $category: [String!]!, $summary: String!, $image: Upload!, $verdict: String!){\r\n        addPost(postTitle: $title, category: $category, postSummary: $summary, image: $image, verdict: $verdict){\r\n            postTitle\r\n            category\r\n            postSummary\r\n            image\r\n            verdict\r\n}\r\n    }\r\n`;\r\n\r\n\r\nclass PostCreator extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n            tags: ['Pakistan'],\r\n            chips: []\r\n        }\r\n    }\r\n    handleTagChange = (tags) => {\r\n        this.setState({tags});\r\n    }\r\n\r\n    handleListTagClick(tag) {\r\n        this.setState({tags: [...this.state.tags, tag]}); // keep existing tag and add one to it\r\n    } \r\n\r\n    handleChangeInput = (tag) => {\r\n        this.setState({tag})\r\n    }\r\n    notDuplicate(tags, newTag) {\r\n        return (!tags.includes(newTag) || this.props.allowDuplicates);\r\n    }\r\n    addTag(tag) {\r\n        if (this.notDuplicate(this.state.tags, tag)) {\r\n            this.setState({tags: [...this.state.tags, tag], inputValue: ''}, () => {\r\n                this.handleNewTag(this.state.tags);\r\n            });\r\n        }\r\n    }\r\n    handleTagDelete(index, e) {\r\n        this.deleteTag(index, () => {\r\n            this.props.onTagChange(this.state.tags);\r\n        });\r\n    }\r\n    deleteTag(index, callback) {\r\n        let tags = this.state.tags.slice();\r\n        \r\n        tags.splice(index, 1);\r\n        this.setState({ tags }, () => {\r\n            if (callback) callback();\r\n        });\r\n    }\r\n    \r\n\r\n    resetHandler = ({ fields, form }) => {\r\n        this.setState({ password: '' }) // manually reset controlled fields (\"password\")\r\n    }\r\n\r\n    render(){\r\n        let titleInput\r\n        let categoryInput\r\n        let summaryInput\r\n        let imageInput\r\n        let verdictInput\r\n\r\n        let imageUrl = '';\r\n        let urlChange = (e) => {\r\n            imageUrl = e.target.value;\r\n        }\r\n\r\n        const styles = {\r\n            chipsContainer: {\r\n                width: '100%',\r\n                ':focus':{\r\n                    color: '#495057',\r\n                    backgroundColor: '#fff',\r\n                    borderColor: '#80bdff',\r\n                    outline: '0',\r\n                    boxShadow: '0 0 0 0.2rem rgba(0, 123, 255, 0.25)'\r\n                }\r\n            }\r\n        } \r\n        return(\r\n            <Mutation mutation={ADD_POST}>\r\n                {addPost => (\r\n                    <Aux>\r\n                    <div className=\"container postcreator-widget\">  \r\n                        <div className=\"panel panel-default\">\r\n                            <div className=\"panel-heading\">\r\n                                <h3 className=\"panel-title\">Post Creator Panel</h3>\r\n                            </div>\r\n                            <div className=\"panel-body\">\r\n                            <div className=\"instructions\"> \r\n                                <p>For editorial purposes only: Please write the <strong>name</strong> and <strong>summary</strong> of the \r\n                                    article, then choose an appropriate <strong>image</strong> to display. Write the <strong>category</strong> of\r\n                                    the article that it belongs to (You may choose multiple). Lastly, select the <strong>Surkhi \r\n                                    Rating</strong> before pressing the \"Submit\" button. You may choose to start over by pressing \r\n                                    \"Reset\".\r\n                                </p>\r\n                            </div>\r\n                            <form id='post-form'\r\n                                onSubmit={e => {\r\n                                    e.preventDefault();\r\n                                    addPost({variables: {postTitle: titleInput.value,\r\n                                                        category: categoryInput.value,\r\n                                                        postSummary: summaryInput.value,\r\n                                                        image: imageInput,\r\n                                                        verdict: verdictInput.value }})\r\n                                    titleInput.value = \"\"\r\n                                    categoryInput.value = \"\"\r\n                                    summaryInput.value = \"\"\r\n                                    verdictInput.value = \"\"\r\n                                }}\r\n                            >\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-6\"> \r\n                                        <div className=\"form-group\">\r\n                                            <label className=\"control-label\">Post Title</label>\r\n                                            <input type=\"text\" \r\n                                                className=\"form-control\" \r\n                                                placeholder=\"Enter first name\" \r\n                                                name=\"postTitle\"\r\n                                                required />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-sm-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <label className=\"control-label\">Select Post Category</label>\r\n                                            <div className=\"input-group\">\r\n                                                <div className=\"input-group-prepend\">\r\n                                                    <label className=\"input-group-text\" for=\"inputGroupSelect01\">Category</label>\r\n\r\n                                                    <TagInput \r\n                                                        onTagChange={this.handleTagChange}\r\n                                                        tags = {this.state.tags}\r\n                                                        name = \"postCategories\"\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> \r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-12\"> \r\n                                        <div className=\"form-group\">\r\n                                            <label className=\"control-label\">Post Summary</label>\r\n                                            <input type=\"textarea\" className=\"form-control\" placeholder=\"Enter Summary...\" name=\"postSummary\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                    \r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-6\">\r\n                                        <label className=\"control-label\">Post Image</label>\r\n                                        <div class=\"input-group\">\r\n                                            <span class=\"input-group-prepend\">\r\n                                                <span class=\"btn btn-default btn-file\">\r\n                                                    Browse… <input type=\"file\" id=\"imgInp\" onChange={urlChange}/>\r\n                                                </span>\r\n                                            </span>\r\n                                            <input type=\"text\" class=\"form-control\" value readOnly />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-sm-6\">\r\n                                        <label className=\"control-label\">Select Verdict</label>\r\n                                        <div className=\"input-group mb-3\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <label className=\"input-group-text\" for=\"inputGroupSelect01\">Verdict</label>\r\n                                            </div>\r\n                                            <select className=\"custom-select\" id=\"inputGroupSelect01\">\r\n                                                <option selected>Choose...</option>\r\n                                                <option value=\"1\">Khara Such</option>\r\n                                                <option value=\"2\">Such</option>\r\n                                                <option value=\"3\">Mumkin</option>\r\n                                                <option value=\"4\">Jhoot</option>\r\n                                                <option value=\"5\">Jhootay Ka Muun Kala</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"panel-footer\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-sm-12\">\r\n                                    <div className=\"pull-right\">\r\n                                        <button type=\"button\" className=\"btn btn-danger reset\" onReset={this.resetHandler}>Reset</button>\r\n                                        <button type=\"button\" className=\"btn btn-success submit\" onSubmit={this.submitHandler}>Submit</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </Aux>\r\n                )};\r\n            </Mutation>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass TagInput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        inputValue: '',\r\n        tags: this.props.tags || []\r\n        }\r\n    }\r\n\r\n    handleNewTag = (tags) => {\r\n        if (this.props.onNewTag) this.props.onNewTag(tags);\r\n        if (this.props.onTagChange) this.props.onTagChange(tags);\r\n    }\r\n\r\n    handleInputChange = ({target: { value: inputValue }}) => {\r\n        inputValue = inputValue == ',' ? '' : inputValue;\r\n        this.setState({inputValue});\r\n    }\r\n\r\n    handleKeyDown = e => {\r\n        let { key, target: {value} } = e;\r\n        let { tags } = this.state;\r\n        switch (key) {\r\n        case 'Tab':\r\n            if (value) e.preventDefault();\r\n        case 'Enter':\r\n        case ',':\r\n            value = value.trim();\r\n            if (value && this.notDuplicate(tags, value)) {\r\n            this.addTag(value);\r\n            } else {\r\n            this.setState({inputValue: ''})\r\n            }\r\n            break;\r\n        case 'Backspace':\r\n            if (!value) {\r\n            this.handleTagDelete(tags.length - 1);\r\n            }\r\n            break;\r\n        default:\r\n        }\r\n    }\r\n\r\n    handleTagDelete = (index, e) => {\r\n        this.deleteTag(index, () => {\r\n        this.props.onTagChange(this.state.tags);\r\n        });\r\n    }\r\n\r\n    deleteTag = (index, callback) => {\r\n        let tags = this.state.tags.slice();\r\n        tags.splice(index, 1);\r\n        this.setState({ tags }, () => {\r\n        if (callback) callback();\r\n        });\r\n    }\r\n\r\n    notDuplicate = (tags, newTag) => {\r\n        return (!tags.includes(newTag) || this.props.allowDuplicates);\r\n    }\r\n\r\n    addTag = tag => {\r\n        if (this.notDuplicate(this.state.tags, tag)) {\r\n        this.setState({tags: [...this.state.tags, tag], inputValue: ''}, () => {\r\n            this.handleNewTag(this.state.tags);\r\n        });\r\n        }\r\n    }\r\n\r\n    updateControlledTags = tags => {\r\n        if (tags && !Helpers.hasDuplicates(tags)) {\r\n        this.setState({ tags }, () => {\r\n            // this.props.onTagChange(tags);\r\n        });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        this.updateControlledTags(nextProps.tags);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <span className=\"tagInputWrapper\">\r\n            <TagsList \r\n            tags={this.state.tags} \r\n            onTagDelete={this.handleTagDelete} \r\n            hashtag={this.props.hashtag}\r\n            />\r\n            <input \r\n            name=\"tagInput\" \r\n            className=\"tagInput\" \r\n            placeholder=\"enter a tag...\" \r\n            value={this.state.inputValue} \r\n            onChange={this.handleInputChange}\r\n            onKeyDown={this.handleKeyDown}\r\n            />\r\n        </span>\r\n        );\r\n    }\r\n}\r\nclass Helpers {\r\n    static contains(orig, filter) {\r\n        let res = filter.map(item => {\r\n        return orig.includes(item);\r\n        });\r\n        return !res.includes(false);\r\n    }\r\n\r\n    static hasDuplicates(array) {\r\n        return (new Set(array)).size !== array.length;\r\n    }\r\n    }\r\n\r\n\r\nconst TagsList = ({tags, onTagDelete, hashtag}) => {\r\n    let list = tags.map((tag, index) => (\r\n    <Tag \r\n        name={tag} \r\n        onDelete={onTagDelete} \r\n        index={index} \r\n        hashtag={hashtag} />\r\n    ));\r\n    return (\r\n        <ul name=\"tagsList\" className=\"tagsList\">\r\n            {list}\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst Tag = ({name, index, onDelete, hashtag, hashtagStyle}) => {\r\n    return (\r\n        <li>\r\n            {hashtag && (\r\n                <span style={{color: '#898989', fontWeight: 'bold', ...hashtagStyle}}># </span>\r\n            )}\r\n            {name} \r\n            <a href=\"#\" onClick={e => onDelete(index, e)}>x</a>\r\n    </li>\r\n    );\r\n}\r\n\r\n\r\nexport default PostCreator;\r\n"]},"metadata":{},"sourceType":"module"}